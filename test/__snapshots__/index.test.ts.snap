// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`synths with minimal options 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/pull_request_template.md linguist-generated
/.github/workflows/automerge.yml linguist-generated
/.github/workflows/build.yml linguist-generated
/.github/workflows/provider-upgrade.yml linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.github/workflows/release.yml linguist-generated
/.github/workflows/stale.yml linguist-generated
/.github/workflows/upgrade-main.yml linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/cdktf.json linguist-generated
/LICENSE linguist-generated
/package.json linguist-generated
/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/yarn.lock linguist-generated",
  ".github/pull_request_template.md": "Fixes #",
  ".github/workflows/automerge.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: automerge
on:
  pull_request:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}
jobs:
  automerge:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: automerge
        uses: pascalgn/automerge-action@v0.14.2
        env:
          GITHUB_TOKEN: \${{ secrets.GH_TOKEN }}
          MERGE_RETRIES: \\"20\\"
          MERGE_RETRY_SLEEP: \\"60000\\"
",
  ".github/workflows/build.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: build
on:
  pull_request: {}
  workflow_dispatch: {}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      self_mutation_happened: \${{ steps.self_mutation.outputs.self_mutation_happened }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Install dependencies
        run: yarn install --check-files
      - name: build
        run: npx projen build
      - id: self_mutation
        name: Find mutations
        run: >-
          git add .

          git diff --staged --patch --exit-code > .repo.patch || echo \\"::set-output name=self_mutation_happened::true\\"
      - if: steps.self_mutation.outputs.self_mutation_happened
        name: Upload patch
        uses: actions/upload-artifact@v2
        with:
          name: .repo.patch
          path: .repo.patch
      - name: Fail build on mutation
        if: steps.self_mutation.outputs.self_mutation_happened
        run: >-
          echo \\"::error::Files were changed during build (see build log). If
          this was triggered from a fork, you will need to update your branch.\\"

          cat .repo.patch

          exit 1
      - name: Upload artifact
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
    container:
      image: hashicorp/jsii-terraform
  self-mutation:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && needs.build.outputs.self_mutation_happened &&
      !(github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: \${{ secrets.PROJEN_GITHUB_TOKEN }}
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@v2
        with:
          name: .repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/.repo.patch ] && git apply \${{ runner.temp
          }}/.repo.patch || echo \\"Empty patch. Skipping.\\"'
      - name: Set git identity
        run: |-
          git config user.name \\"team-tf-cdk\\"
          git config user.email \\"github-team-tf-cdk@hashicorp.com\\"
      - name: Push changes
        run: |-2
            git add .
            git commit -m -s \\"chore: self mutation\\"
            git push origin HEAD:\${{ github.event.pull_request.head.ref }}
  package-js:
    needs: build
    runs-on: ubuntu-latest
    permissions: {}
    if: \\"! needs.build.outputs.self_mutation_happened\\"
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create js artifact
        run: cd .repo && npx projen package:js
      - name: Collect js Artifact
        run: mv .repo/dist dist
  package-java:
    needs: build
    runs-on: ubuntu-latest
    permissions: {}
    if: \\"! needs.build.outputs.self_mutation_happened\\"
    steps:
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11.x
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create java artifact
        run: cd .repo && npx projen package:java
      - name: Collect java Artifact
        run: mv .repo/dist dist
  package-python:
    needs: build
    runs-on: ubuntu-latest
    permissions: {}
    if: \\"! needs.build.outputs.self_mutation_happened\\"
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create python artifact
        run: cd .repo && npx projen package:python
      - name: Collect python Artifact
        run: mv .repo/dist dist
  package-dotnet:
    needs: build
    runs-on: ubuntu-latest
    permissions: {}
    if: \\"! needs.build.outputs.self_mutation_happened\\"
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create dotnet artifact
        run: cd .repo && npx projen package:dotnet
      - name: Collect dotnet Artifact
        run: mv .repo/dist dist
",
  ".github/workflows/provider-upgrade.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: provider-upgrade
on:
  schedule:
    - cron: 0 */4 * * *
  workflow_dispatch: {}
jobs:
  upgrade:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: yarn install
      - run: yarn fetch
      - run: yarn compile
      - run: yarn docgen
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: \\"chore: upgrade provider\\"
          branch: auto/provider-upgrade
          title: \\"chore: upgrade provider\\"
          body: This PR upgrades provider to the latest version
          labels: automerge
          token: \${{ secrets.GH_TOKEN }}
          delete-branch: true
          committer: team-tf-cdk <github-team-tf-cdk@hashicorp.com>
          author: Team Terraform CDK <github-team-tf-cdk@hashicorp.com>
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v3.4.6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
    container:
      image: hashicorp/jsii-terraform
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Collect GitHub Metadata
        run: mv .repo/dist dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create js artifact
        run: cd .repo && npx projen package:js
      - name: Collect js Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}
  release_maven:
    name: Publish to Maven Central
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11.x
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create java artifact
        run: cd .repo && npx projen package:java
      - name: Collect java Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-maven
        env:
          MAVEN_ENDPOINT: https://hashicorp.oss.sonatype.org
          MAVEN_GPG_PRIVATE_KEY: \${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: \${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_PASSWORD: \${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: \${{ secrets.MAVEN_USERNAME }}
          MAVEN_STAGING_PROFILE_ID: \${{ secrets.MAVEN_STAGING_PROFILE_ID }}
  release_pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create python artifact
        run: cd .repo && npx projen package:python
      - name: Collect python Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: \${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: \${{ secrets.TWINE_PASSWORD }}
  release_nuget:
    name: Publish to NuGet Gallery
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create dotnet artifact
        run: cd .repo && npx projen package:dotnet
      - name: Collect dotnet Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-nuget
        env:
          NUGET_API_KEY: \${{ secrets.NUGET_API_KEY }}
",
  ".github/workflows/stale.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: stale
on:
  schedule:
    - cron: 0 1 * * *
  workflow_dispatch: {}
jobs:
  stale:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/stale@v4
        with:
          days-before-stale: -1
          days-before-close: -1
          days-before-pr-stale: 14
          days-before-pr-close: 2
          stale-pr-message: This pull request is now marked as stale because it hasn't
            seen activity for a while. Add a comment or it will be closed soon.
          close-pr-message: Closing this pull request as it hasn't seen activity for a
            while. Please add a comment @mentioning a maintainer to reopen.
          stale-pr-label: stale
          days-before-issue-stale: 60
          days-before-issue-close: 7
          stale-issue-message: This issue is now marked as stale because it hasn't seen
            activity for a while. Add a comment or it will be closed soon.
          close-issue-message: Closing this issue as it hasn't seen activity for a while.
            Please add a comment @mentioning a maintainer to reopen.
          stale-issue-label: stale
",
  ".github/workflows/upgrade-main.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: upgrade-main
on:
  workflow_dispatch: {}
  schedule:
    - cron: 0 0 * * *
jobs:
  upgrade:
    name: Upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      patch_created: \${{ steps.create_patch.outputs.patch_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: Upgrade dependencies
        run: npx projen upgrade
      - id: create_patch
        name: Find mutations
        run: >-
          git add .

          git diff --staged --patch --exit-code > .repo.patch || echo \\"::set-output name=patch_created::true\\"
      - if: steps.create_patch.outputs.patch_created
        name: Upload patch
        uses: actions/upload-artifact@v2
        with:
          name: .repo.patch
          path: .repo.patch
    container:
      image: hashicorp/jsii-terraform
  pr:
    name: Create Pull Request
    needs: upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: \${{ needs.upgrade.outputs.patch_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: \${{ secrets.PROJEN_GITHUB_TOKEN }}
          ref: main
      - name: Download patch
        uses: actions/download-artifact@v2
        with:
          name: .repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/.repo.patch ] && git apply \${{ runner.temp
          }}/.repo.patch || echo \\"Empty patch. Skipping.\\"'
      - name: Set git identity
        run: |-
          git config user.name \\"team-tf-cdk\\"
          git config user.email \\"github-team-tf-cdk@hashicorp.com\\"
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v3
        with:
          token: \${{ secrets.PROJEN_GITHUB_TOKEN }}
          commit-message: >-
            chore(deps): upgrade dependencies


            Upgrades project dependencies. See details in [workflow run].


            [Workflow Run]: https://github.com/\${{ github.repository }}/actions/runs/\${{ github.run_id }}


            ------


            *Automatically created by projen via the \\"upgrade-main\\" workflow*
          branch: github-actions/upgrade-main
          title: \\"chore(deps): upgrade dependencies\\"
          labels: automerge
          body: >-
            Upgrades project dependencies. See details in [workflow run].


            [Workflow Run]: https://github.com/\${{ github.repository }}/actions/runs/\${{ github.run_id }}


            ------


            *Automatically created by projen via the \\"upgrade-main\\" workflow*
          author: team-tf-cdk <github-team-tf-cdk@hashicorp.com>
          committer: team-tf-cdk <github-team-tf-cdk@hashicorp.com>
          signoff: true
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/.github/workflows/stale.yml
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.github/workflows/build.yml
/dist/changelog.md
/dist/version.txt
!/.github/workflows/release.yml
!/.github/pull_request_template.md
!/test/
!/tsconfig.dev.json
!/src/
/lib
/dist/
.jsii
tsconfig.json
!/API.md
.gen
.terraform
package-lock.json
!/cdktf.json
!/README.md
!/.github/workflows/provider-upgrade.yml
!/.github/workflows/automerge.yml
!/.github/workflows/upgrade-main.yml
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.projen/
/dist/changelog.md
/dist/version.txt
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
!.jsii
.gen
.terraform
cdktf.json
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "name": "@cdktf/provider-project",
        "type": "build",
        "version": "^0.2.8",
      },
      Object {
        "name": "@types/node",
        "type": "build",
        "version": "^12",
      },
      Object {
        "name": "cdktf-cli",
        "type": "build",
        "version": "0.8.6",
      },
      Object {
        "name": "cdktf",
        "type": "build",
        "version": "0.8.6",
      },
      Object {
        "name": "constructs",
        "type": "build",
        "version": "10.0.0",
      },
      Object {
        "name": "dot-prop",
        "type": "build",
        "version": "^5.2.0",
      },
      Object {
        "name": "jsii",
        "type": "build",
      },
      Object {
        "name": "jsii-diff",
        "type": "build",
      },
      Object {
        "name": "jsii-docgen",
        "type": "build",
      },
      Object {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^12",
      },
      Object {
        "name": "projen",
        "type": "build",
      },
      Object {
        "name": "standard-version",
        "type": "build",
        "version": "^9",
      },
      Object {
        "name": "typescript",
        "type": "build",
      },
      Object {
        "name": "cdktf",
        "type": "peer",
        "version": "0.8.6",
      },
      Object {
        "name": "constructs",
        "type": "peer",
        "version": "10.0.0",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/pull_request_template.md",
      ".github/workflows/automerge.yml",
      ".github/workflows/build.yml",
      ".github/workflows/provider-upgrade.yml",
      ".github/workflows/pull-request-lint.yml",
      ".github/workflows/release.yml",
      ".github/workflows/stale.yml",
      ".github/workflows/upgrade-main.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "cdktf.json",
      "LICENSE",
      "README.md",
      "tsconfig.dev.json",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "env": Object {
      "CHECKPOINT_DISABLE": "1",
      "PATH": "$(npx -c \\"node -e \\\\\\"console.log(process.env.PATH)\\\\\\"\\")",
    },
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "bump": Object {
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "BUMPFILE": "dist/version.txt",
          "CHANGELOG": "dist/changelog.md",
          "OUTFILE": "package.json",
          "RELEASETAG": "dist/releasetag.txt",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compat": Object {
        "description": "Perform API compatibility check against latest version",
        "name": "compat",
        "steps": Array [
          Object {
            "exec": "jsii-diff npm:$(node -p \\"require('./package.json').name\\") -k --ignore-file .compatignore || (echo \\"
UNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.
\\" && exit 1)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
        "steps": Array [
          Object {
            "exec": "jsii --silence-warnings=reserved-word --no-fix-peer-dependencies",
          },
        ],
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
        "steps": Array [
          Object {
            "exec": "node .projenrc.js",
          },
        ],
      },
      "docgen": Object {
        "description": "Generate API.md from .jsii manifest",
        "name": "docgen",
        "steps": Array [
          Object {
            "exec": "jsii-docgen",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": Array [
          Object {
            "exec": "mkdir -p dist",
          },
          Object {
            "exec": "rsync -a . dist --exclude .git --exclude node_modules",
          },
        ],
      },
      "package-all": Object {
        "description": "Packages artifacts for all target languages",
        "name": "package-all",
        "steps": Array [
          Object {
            "spawn": "package:js",
          },
          Object {
            "spawn": "package:java",
          },
          Object {
            "spawn": "package:python",
          },
          Object {
            "spawn": "package:dotnet",
          },
        ],
      },
      "package:dotnet": Object {
        "description": "Create dotnet language bindings",
        "name": "package:dotnet",
        "steps": Array [
          Object {
            "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
          },
          Object {
            "exec": "npx jsii-pacmak@$jsii_version -v --target dotnet",
          },
        ],
      },
      "package:java": Object {
        "description": "Create java language bindings",
        "name": "package:java",
        "steps": Array [
          Object {
            "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
          },
          Object {
            "exec": "npx jsii-pacmak@$jsii_version -v --target java",
          },
        ],
      },
      "package:js": Object {
        "description": "Create js language bindings",
        "name": "package:js",
        "steps": Array [
          Object {
            "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
          },
          Object {
            "exec": "npx jsii-pacmak@$jsii_version -v --target js",
          },
        ],
      },
      "package:python": Object {
        "description": "Create python language bindings",
        "name": "package:python",
        "steps": Array [
          Object {
            "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
          },
          Object {
            "exec": "npx jsii-pacmak@$jsii_version -v --target python",
          },
        ],
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
        "steps": Array [
          Object {
            "spawn": "docgen",
          },
        ],
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "release": Object {
        "description": "Prepare a release from \\"main\\" branch",
        "env": Object {
          "RELEASE": "true",
        },
        "name": "release",
        "steps": Array [
          Object {
            "exec": "rm -fr dist",
          },
          Object {
            "spawn": "bump",
          },
          Object {
            "spawn": "build",
          },
          Object {
            "spawn": "unbump",
          },
          Object {
            "exec": "git diff --ignore-space-at-eol --exit-code",
          },
        ],
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
      },
      "unbump": Object {
        "description": "Restores version to 0.0.0",
        "env": Object {
          "BUMPFILE": "dist/version.txt",
          "CHANGELOG": "dist/changelog.md",
          "OUTFILE": "package.json",
          "RELEASETAG": "dist/releasetag.txt",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
      "upgrade": Object {
        "description": "upgrade dependencies",
        "env": Object {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": Array [
          Object {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'",
          },
          Object {
            "exec": "yarn install --check-files",
          },
          Object {
            "exec": "yarn upgrade @cdktf/provider-project @types/node cdktf-cli cdktf constructs dot-prop jsii jsii-diff jsii-docgen npm-check-updates standard-version typescript cdktf constructs",
          },
          Object {
            "exec": "npx projen",
          },
        ],
      },
      "upgrade-projen": Object {
        "description": "upgrade projen",
        "env": Object {
          "CI": "0",
        },
        "name": "upgrade-projen",
        "steps": Array [
          Object {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --filter='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --filter='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --filter='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --filter='projen'",
          },
          Object {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'",
          },
          Object {
            "exec": "yarn install --check-files",
          },
          Object {
            "exec": "yarn upgrade projen",
          },
          Object {
            "exec": "npx projen",
          },
        ],
      },
      "watch": Object {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": Array [
          Object {
            "exec": "jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies",
          },
        ],
      },
    },
  },
  "LICENSE": "Mozilla Public License, version 2.0

1. Definitions

1.1. “Contributor”

     means each individual or legal entity that creates, contributes to the
     creation of, or owns Covered Software.

1.2. “Contributor Version”

     means the combination of the Contributions of others (if any) used by a
     Contributor and that particular Contributor’s Contribution.

1.3. “Contribution”

     means Covered Software of a particular Contributor.

1.4. “Covered Software”

     means Source Code Form to which the initial Contributor has attached the
     notice in Exhibit A, the Executable Form of such Source Code Form, and
     Modifications of such Source Code Form, in each case including portions
     thereof.

1.5. “Incompatible With Secondary Licenses”
     means

     a. that the initial Contributor has attached the notice described in
        Exhibit B to the Covered Software; or

     b. that the Covered Software was made available under the terms of version
        1.1 or earlier of the License, but not also under the terms of a
        Secondary License.

1.6. “Executable Form”

     means any form of the work other than Source Code Form.

1.7. “Larger Work”

     means a work that combines Covered Software with other material, in a separate
     file or files, that is not Covered Software.

1.8. “License”

     means this document.

1.9. “Licensable”

     means having the right to grant, to the maximum extent possible, whether at the
     time of the initial grant or subsequently, any and all of the rights conveyed by
     this License.

1.10. “Modifications”

     means any of the following:

     a. any file in Source Code Form that results from an addition to, deletion
        from, or modification of the contents of Covered Software; or

     b. any new file in Source Code Form that contains any Covered Software.

1.11. “Patent Claims” of a Contributor

      means any patent claim(s), including without limitation, method, process,
      and apparatus claims, in any patent Licensable by such Contributor that
      would be infringed, but for the grant of the License, by the making,
      using, selling, offering for sale, having made, import, or transfer of
      either its Contributions or its Contributor Version.

1.12. “Secondary License”

      means either the GNU General Public License, Version 2.0, the GNU Lesser
      General Public License, Version 2.1, the GNU Affero General Public
      License, Version 3.0, or any later versions of those licenses.

1.13. “Source Code Form”

      means the form of the work preferred for making modifications.

1.14. “You” (or “Your”)

      means an individual or a legal entity exercising rights under this
      License. For legal entities, “You” includes any entity that controls, is
      controlled by, or is under common control with You. For purposes of this
      definition, “control” means (a) the power, direct or indirect, to cause
      the direction or management of such entity, whether by contract or
      otherwise, or (b) ownership of more than fifty percent (50%) of the
      outstanding shares or beneficial ownership of such entity.


2. License Grants and Conditions

2.1. Grants

     Each Contributor hereby grants You a world-wide, royalty-free,
     non-exclusive license:

     a. under intellectual property rights (other than patent or trademark)
        Licensable by such Contributor to use, reproduce, make available,
        modify, display, perform, distribute, and otherwise exploit its
        Contributions, either on an unmodified basis, with Modifications, or as
        part of a Larger Work; and

     b. under Patent Claims of such Contributor to make, use, sell, offer for
        sale, have made, import, and otherwise transfer either its Contributions
        or its Contributor Version.

2.2. Effective Date

     The licenses granted in Section 2.1 with respect to any Contribution become
     effective for each Contribution on the date the Contributor first distributes
     such Contribution.

2.3. Limitations on Grant Scope

     The licenses granted in this Section 2 are the only rights granted under this
     License. No additional rights or licenses will be implied from the distribution
     or licensing of Covered Software under this License. Notwithstanding Section
     2.1(b) above, no patent license is granted by a Contributor:

     a. for any code that a Contributor has removed from Covered Software; or

     b. for infringements caused by: (i) Your and any other third party’s
        modifications of Covered Software, or (ii) the combination of its
        Contributions with other software (except as part of its Contributor
        Version); or

     c. under Patent Claims infringed by Covered Software in the absence of its
        Contributions.

     This License does not grant any rights in the trademarks, service marks, or
     logos of any Contributor (except as may be necessary to comply with the
     notice requirements in Section 3.4).

2.4. Subsequent Licenses

     No Contributor makes additional grants as a result of Your choice to
     distribute the Covered Software under a subsequent version of this License
     (see Section 10.2) or under the terms of a Secondary License (if permitted
     under the terms of Section 3.3).

2.5. Representation

     Each Contributor represents that the Contributor believes its Contributions
     are its original creation(s) or it has sufficient rights to grant the
     rights to its Contributions conveyed by this License.

2.6. Fair Use

     This License is not intended to limit any rights You have under applicable
     copyright doctrines of fair use, fair dealing, or other equivalents.

2.7. Conditions

     Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in
     Section 2.1.


3. Responsibilities

3.1. Distribution of Source Form

     All distribution of Covered Software in Source Code Form, including any
     Modifications that You create or to which You contribute, must be under the
     terms of this License. You must inform recipients that the Source Code Form
     of the Covered Software is governed by the terms of this License, and how
     they can obtain a copy of this License. You may not attempt to alter or
     restrict the recipients’ rights in the Source Code Form.

3.2. Distribution of Executable Form

     If You distribute Covered Software in Executable Form then:

     a. such Covered Software must also be made available in Source Code Form,
        as described in Section 3.1, and You must inform recipients of the
        Executable Form how they can obtain a copy of such Source Code Form by
        reasonable means in a timely manner, at a charge no more than the cost
        of distribution to the recipient; and

     b. You may distribute such Executable Form under the terms of this License,
        or sublicense it under different terms, provided that the license for
        the Executable Form does not attempt to limit or alter the recipients’
        rights in the Source Code Form under this License.

3.3. Distribution of a Larger Work

     You may create and distribute a Larger Work under terms of Your choice,
     provided that You also comply with the requirements of this License for the
     Covered Software. If the Larger Work is a combination of Covered Software
     with a work governed by one or more Secondary Licenses, and the Covered
     Software is not Incompatible With Secondary Licenses, this License permits
     You to additionally distribute such Covered Software under the terms of
     such Secondary License(s), so that the recipient of the Larger Work may, at
     their option, further distribute the Covered Software under the terms of
     either this License or such Secondary License(s).

3.4. Notices

     You may not remove or alter the substance of any license notices (including
     copyright notices, patent notices, disclaimers of warranty, or limitations
     of liability) contained within the Source Code Form of the Covered
     Software, except that You may alter any license notices to the extent
     required to remedy known factual inaccuracies.

3.5. Application of Additional Terms

     You may choose to offer, and to charge a fee for, warranty, support,
     indemnity or liability obligations to one or more recipients of Covered
     Software. However, You may do so only on Your own behalf, and not on behalf
     of any Contributor. You must make it absolutely clear that any such
     warranty, support, indemnity, or liability obligation is offered by You
     alone, and You hereby agree to indemnify every Contributor for any
     liability incurred by such Contributor as a result of warranty, support,
     indemnity or liability terms You offer. You may include additional
     disclaimers of warranty and limitations of liability specific to any
     jurisdiction.

4. Inability to Comply Due to Statute or Regulation

   If it is impossible for You to comply with any of the terms of this License
   with respect to some or all of the Covered Software due to statute, judicial
   order, or regulation then You must: (a) comply with the terms of this License
   to the maximum extent possible; and (b) describe the limitations and the code
   they affect. Such description must be placed in a text file included with all
   distributions of the Covered Software under this License. Except to the
   extent prohibited by statute or regulation, such description must be
   sufficiently detailed for a recipient of ordinary skill to be able to
   understand it.

5. Termination

5.1. The rights granted under this License will terminate automatically if You
     fail to comply with any of its terms. However, if You become compliant,
     then the rights granted under this License from a particular Contributor
     are reinstated (a) provisionally, unless and until such Contributor
     explicitly and finally terminates Your grants, and (b) on an ongoing basis,
     if such Contributor fails to notify You of the non-compliance by some
     reasonable means prior to 60 days after You have come back into compliance.
     Moreover, Your grants from a particular Contributor are reinstated on an
     ongoing basis if such Contributor notifies You of the non-compliance by
     some reasonable means, this is the first time You have received notice of
     non-compliance with this License from such Contributor, and You become
     compliant prior to 30 days after Your receipt of the notice.

5.2. If You initiate litigation against any entity by asserting a patent
     infringement claim (excluding declaratory judgment actions, counter-claims,
     and cross-claims) alleging that a Contributor Version directly or
     indirectly infringes any patent, then the rights granted to You by any and
     all Contributors for the Covered Software under Section 2.1 of this License
     shall terminate.

5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user
     license agreements (excluding distributors and resellers) which have been
     validly granted by You or Your distributors under this License prior to
     termination shall survive termination.

6. Disclaimer of Warranty

   Covered Software is provided under this License on an “as is” basis, without
   warranty of any kind, either expressed, implied, or statutory, including,
   without limitation, warranties that the Covered Software is free of defects,
   merchantable, fit for a particular purpose or non-infringing. The entire
   risk as to the quality and performance of the Covered Software is with You.
   Should any Covered Software prove defective in any respect, You (not any
   Contributor) assume the cost of any necessary servicing, repair, or
   correction. This disclaimer of warranty constitutes an essential part of this
   License. No use of  any Covered Software is authorized under this License
   except under this disclaimer.

7. Limitation of Liability

   Under no circumstances and under no legal theory, whether tort (including
   negligence), contract, or otherwise, shall any Contributor, or anyone who
   distributes Covered Software as permitted above, be liable to You for any
   direct, indirect, special, incidental, or consequential damages of any
   character including, without limitation, damages for lost profits, loss of
   goodwill, work stoppage, computer failure or malfunction, or any and all
   other commercial damages or losses, even if such party shall have been
   informed of the possibility of such damages. This limitation of liability
   shall not apply to liability for death or personal injury resulting from such
   party’s negligence to the extent applicable law prohibits such limitation.
   Some jurisdictions do not allow the exclusion or limitation of incidental or
   consequential damages, so this exclusion and limitation may not apply to You.

8. Litigation

   Any litigation relating to this License may be brought only in the courts of
   a jurisdiction where the defendant maintains its principal place of business
   and such litigation shall be governed by laws of that jurisdiction, without
   reference to its conflict-of-law provisions. Nothing in this Section shall
   prevent a party’s ability to bring cross-claims or counter-claims.

9. Miscellaneous

   This License represents the complete agreement concerning the subject matter
   hereof. If any provision of this License is held to be unenforceable, such
   provision shall be reformed only to the extent necessary to make it
   enforceable. Any law or regulation which provides that the language of a
   contract shall be construed against the drafter shall not be used to construe
   this License against a Contributor.


10. Versions of the License

10.1. New Versions

      Mozilla Foundation is the license steward. Except as provided in Section
      10.3, no one other than the license steward has the right to modify or
      publish new versions of this License. Each version will be given a
      distinguishing version number.

10.2. Effect of New Versions

      You may distribute the Covered Software under the terms of the version of
      the License under which You originally received the Covered Software, or
      under the terms of any subsequent version published by the license
      steward.

10.3. Modified Versions

      If you create software not governed by this License, and you want to
      create a new license for such software, you may create and use a modified
      version of this License if you rename the license and remove any
      references to the name of the license steward (except to note that such
      modified license differs from this License).

10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses
      If You choose to distribute Source Code Form that is Incompatible With
      Secondary Licenses under the terms of this version of the License, the
      notice described in Exhibit B of this License must be attached.

Exhibit A - Source Code Form License Notice

      This Source Code Form is subject to the
      terms of the Mozilla Public License, v.
      2.0. If a copy of the MPL was not
      distributed with this file, You can
      obtain one at
      http://mozilla.org/MPL/2.0/.

If it is not possible or desirable to put the notice in a particular file, then
You may include the notice in a location (such as a LICENSE file in a relevant
directory) where a recipient would be likely to look for such a notice.

You may add additional accurate notices of copyright ownership.

Exhibit B - “Incompatible With Secondary Licenses” Notice

      This Source Code Form is “Incompatible
      With Secondary Licenses”, as defined by
      the Mozilla Public License, v. 2.0.
",
  "README.md": "
# Terraform CDK random Provider undefined

This repo builds and publishes the Terraform random Provider bindings for [cdktf](https://cdk.tf).

## Available Packages

### NPM

The npm package is available at [https://www.npmjs.com/package/@cdktf/provider-random](https://www.npmjs.com/package/@cdktf/provider-random).

\`npm install @cdktf/provider-random\`

### PyPI

The PyPI package is available at [https://pypi.org/project/cdktf-cdktf-provider-random](https://pypi.org/project/cdktf-cdktf-provider-random).

\`pipenv install cdktf-cdktf-provider-random\`

### Nuget

The Nuget package is available at [https://www.nuget.org/packages/HashiCorp.Cdktf.Providers.Random](https://www.nuget.org/packages/HashiCorp.Cdktf.Providers.Random).

\`dotnet add package HashiCorp.Cdktf.Providers.Random\`

### Maven

The Maven package is available at [https://mvnrepository.com/artifact/com.hashicorp/cdktf-provider-random](https://mvnrepository.com/artifact/com.hashicorp/cdktf-provider-random).

\`\`\`
<dependency>
    <groupId>com.hashicorp</groupId>
    <artifactId>cdktf-provider-random</artifactId>
    <version>[REPLACE WITH DESIRED VERSION]</version>
</dependency>
\`\`\`

## Docs

Find auto-generated docs for this provider here: [./API.md](./API.md)

## Versioning

This project is explicitly not tracking the Terraform random Provider version 1:1. In fact, it always tracks \`latest\` of \`undefined\` with every release. If there are scenarios where you explicitly have to pin your provider version, you can do so by generating the [provider constructs manually](https://cdk.tf/imports).

These are the upstream dependencies:

- [Terraform CDK](https://cdk.tf)
- [Terraform random Provider](https://github.com/terraform-providers/terraform-provider-random)
- [Terraform Engine](https://terraform.io)

If there are breaking changes (backward incompatible) in any of the above, the major version of this project will be bumped. While the Terraform Engine and the Terraform random Provider are relatively stable, the Terraform CDK is in an early stage. Therefore, it's likely that there will be breaking changes.

## Features / Issues / Bugs

Please report bugs and issues to the [terraform cdk](https://cdk.tf) project:

- [Create bug report](https://cdk.tf/bug)
- [Create feature request](https://cdk.tf/feature)

## Contributing

### projen

This is mostly based on [projen](https://github.com/eladb/projen), which takes care of generating the entire repository.

### cdktf-provider-project based on projen

There's a custom [project builder](https://github.com/hashicorp/cdktf-provider-project) which encapsulate the common settings for all \`cdktf\` providers.

### Provider Version

The provider version can be adjusted in [./.projenrc.js](./.projenrc.js).

### Repository Management

The repository is managed by [Repository Manager](https://github.com/hashicorp/cdktf-repository-manager/)
",
  "cdktf.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "app": "echo noop",
    "language": "typescript",
    "terraformProviders": Array [
      "random",
    ],
  },
  "package.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "author": Object {
      "name": "HashiCorp",
      "organization": true,
      "url": "https://hashicorp.com",
    },
    "description": "Prebuilt random Provider for Terraform CDK (cdktf)",
    "devDependencies": Object {
      "@cdktf/provider-project": "^0.2.8",
      "@types/node": "^12",
      "cdktf": "0.8.6",
      "cdktf-cli": "0.8.6",
      "constructs": "10.0.0",
      "dot-prop": "^5.2.0",
      "jsii": "*",
      "jsii-diff": "*",
      "jsii-docgen": "*",
      "npm-check-updates": "^12",
      "projen": "*",
      "standard-version": "^9",
      "typescript": "*",
    },
    "jsii": Object {
      "outdir": "dist",
      "targets": Object {
        "dotnet": Object {
          "namespace": "HashiCorp.Cdktf.Providers.Random",
          "packageId": "HashiCorp.Cdktf.Providers.Random",
        },
        "java": Object {
          "maven": Object {
            "artifactId": "cdktf-provider-random",
            "groupId": "com.hashicorp",
          },
          "package": "com.hashicorp.cdktf.providers.random_provider",
        },
        "python": Object {
          "distName": "cdktf-cdktf-provider-random",
          "module": "cdktf_cdktf_provider_random",
        },
      },
      "tsc": Object {
        "outDir": "lib",
        "rootDir": "src",
      },
    },
    "keywords": Array [
      "cdk",
      "cdktf",
      "provider",
      "random",
      "terraform",
    ],
    "license": "MPL-2.0",
    "main": "lib/index.js",
    "name": "@cdktf/provider-random",
    "peerDependencies": Object {
      "cdktf": "0.8.6",
      "constructs": "10.0.0",
    },
    "publishConfig": Object {
      "access": "public",
    },
    "repository": Object {
      "type": "git",
      "url": "https://github.com/hashicorp/cdktf-provider-random.git",
    },
    "scripts": Object {
      "build": "npx projen build",
      "build-provider": "yarn fetch && yarn compile && yarn docgen",
      "bump": "npx projen bump",
      "clobber": "npx projen clobber",
      "commit": "git add -A && git commit -am \\"Update provider\\" || echo \\"No changes to commit\\"",
      "compat": "npx projen compat",
      "compile": "jsii --silence-warnings=reserved-word",
      "default": "npx projen default",
      "docgen": "npx projen docgen",
      "fetch": "mkdir -p src && rm -rf ./src/* && cdktf get && cp -R .gen/providers/random/* ./src/",
      "package": "npx projen package",
      "package-all": "npx projen package-all",
      "package:dotnet": "npx projen package:dotnet",
      "package:java": "npx projen package:java",
      "package:js": "npx projen package:js",
      "package:python": "npx projen package:python",
      "post-compile": "npx projen post-compile",
      "pre-compile": "npx projen pre-compile",
      "prebump": "yarn fetch && yarn compile && yarn run commit && yarn run should-release",
      "projen": "npx projen",
      "release": "npx projen release",
      "should-release": "! git diff --exit-code v$(cat version.json | jq -r '.version') ./src ./package.json",
      "test": "jest --passWithNoTests",
      "unbump": "npx projen unbump",
      "upgrade": "npx projen upgrade",
      "upgrade-projen": "npx projen upgrade-projen",
      "watch": "npx projen watch",
    },
    "stability": "stable",
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "tsconfig.dev.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "compilerOptions": Object {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": Array [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": Array [
      "node_modules",
    ],
    "include": Array [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
}
`;
